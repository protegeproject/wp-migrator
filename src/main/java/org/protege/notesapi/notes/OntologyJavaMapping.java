package org.protege.notesapi.notes;

import org.protege.notesapi.NotesConstants;
import org.protege.notesapi.notes.impl.*;
import org.protege.notesapi.util.OntologyJavaMappingUtil;

/**
 * Generated by Protege (http://protege.stanford.edu).
 *
 * @version generated on Mon Aug 18 21:11:09 GMT-08:00 2008
 */
/** @author csnyulas */
public class OntologyJavaMapping {

    public static final String NAMESPACE = NotesConstants.CHAO_NAMESPACE;

    public static void initMap() {
        OntologyJavaMappingUtil.add(NAMESPACE + "Advice" , Advice.class, DefaultAdvice.class);
        OntologyJavaMappingUtil.add(NAMESPACE + "AgreeDisagreeVote" ,
                                    VoteAgreeDisagree.class,
                                    DefaultVoteAgreeDisagree.class);
        OntologyJavaMappingUtil.add(NAMESPACE + "AnnotatableThing" ,
                                    AnnotatableThing.class,
                                    DefaultAnnotatableThing.class);
        OntologyJavaMappingUtil.add(NAMESPACE + "Annotation" , Annotation.class, DefaultAnnotation.class);
        OntologyJavaMappingUtil.add(NAMESPACE + "AnnotationStatus" ,
                                    StatusAnnotation.class,
                                    DefaultStatusAnnotation.class);
        OntologyJavaMappingUtil.add(NAMESPACE + "ChangeHierarchyProposal" ,
                                    ProposalChangeHierarchy.class,
                                    DefaultProposalChangeHierarchy.class);
        OntologyJavaMappingUtil.add(NAMESPACE + "ChangePropertyValueProposal" ,
                                    ProposalChangePropertyValue.class,
                                    DefaultProposalChangePropertyValue.class);
        OntologyJavaMappingUtil.add(NAMESPACE + "Comment" , Comment.class, DefaultComment.class);
        OntologyJavaMappingUtil.add(NAMESPACE + "CreateEntityProposal" ,
                                    ProposalCreateEntity.class,
                                    DefaultProposalCreateEntity.class);
        OntologyJavaMappingUtil.add(NAMESPACE + "Example" , Example.class, DefaultExample.class);
        OntologyJavaMappingUtil.add(NAMESPACE + "Explanation" , Explanation.class, DefaultExplanation.class);
        OntologyJavaMappingUtil.add(NAMESPACE + "FiveStarsVote" , VoteFiveStars.class, DefaultVoteFiveStars.class);
        OntologyJavaMappingUtil.add(NAMESPACE + "LinguisticEntity" ,
                                    LinguisticEntity.class,
                                    DefaultLinguisticEntity.class);
        //OntologyJavaMappingUtil.add(NAMESPACE + "MergeProposal", MergeProposal.class, DefaultMergeProposal.class);
        OntologyJavaMappingUtil.add(NAMESPACE + "Proposal" , Proposal.class, DefaultProposal.class);
        //Do we need this? //OntologyJavaMappingUtil.add(NAMESPACE + "ProposalStatus", StatusProposal.class, DefaultStatusProposal.class);
        //OntologyJavaMappingUtil.add(NAMESPACE + "RetireProposal", RetireProposal.class, DefaultRetireProposal.class);
        OntologyJavaMappingUtil.add(NAMESPACE + "Question" , Question.class, DefaultQuestion.class);
        OntologyJavaMappingUtil.add(NAMESPACE + "Review" , Review.class, DefaultReview.class);
        //OntologyJavaMappingUtil.add(NAMESPACE + "ReviewRequest", ReviewRequest.class, DefaultReviewRequest.class);
        OntologyJavaMappingUtil.add(NAMESPACE + "SeeAlso" , SeeAlso.class, DefaultSeeAlso.class);
        //OntologyJavaMappingUtil.add(NAMESPACE + "SplitProposal", SplitProposal.class, DefaultSplitProposal.class);
        OntologyJavaMappingUtil.add(NAMESPACE + "Status" , Status.class, DefaultStatus.class);
        OntologyJavaMappingUtil.add(NAMESPACE + "Vote" , Vote.class, DefaultVote.class);
    }
}
